// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// The UserAccount table has no relationships to other tables and is only for internal account use on the sensei app
// Account Levels: ADMIN, CUSTSERV, PRODMGMT, FINANCE, OPERATIONS
model UserAccount {
  userAccountID       String         @id @default(uuid())
  userAccountLogin    String         @unique
  userAccountPassword String
  userAccountLevel    String?        @default("CUSTSERV")
  userAccountEmail    String
  userAccountActive   Boolean        @default(true)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  ProductOrder        ProductOrder[]
}

// The CustomerAccount table has a 1:M relationship with the CustomerProfile table
model CustomerAccount {
  customerAccountID       String             @id @default(uuid())
  customerAccountNumber   Int                @unique
  customerLogin           String             @unique
  customerPassword        String
  customerLastName        String             @db.VarChar(255)
  customerFirstName       String             @db.VarChar(255)
  customerEmail           String
  customerPhone           String
  customerMiddleInitial   String?            @db.VarChar(1)
  customerBillingAddLn1   String
  customerBillingAddLn2   String?
  customerBillingAddCity  String
  customerBillingAddState String
  customerBillingAddZIP   String
  customerShipAddLn1      String
  customerShipAddLn2      String?
  customerShipAddCity     String
  customerShipAddState    String
  customerShipAddZIP      String
  customerDOB             String?
  customerAccountActive   Boolean            @default(true)
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
  profiles                CustomerProfile[]
  salesTransactions       SalesTransaction[]
}

// The CustomerProfile table has a M:1 relationship with the CustomerAccount table (e.g. members of a family can use
// the same customer login and account, but have their own profiles, e.g., favorites list and purchase history).
model CustomerProfile {
  customerID              String             @id @default(uuid())
  customerLastName        String             @db.VarChar(255)
  customerFirstName       String             @db.VarChar(255)
  customerMiddleInitial   String?            @db.VarChar(1)
  customerEmail           String
  customerPhone           String
  customerBillingAddLn1   String
  customerBillingAddLn2   String?
  customerBillingAddCity  String
  customerBillingAddState String
  customerBillingAddZIP   String
  customerShipAddLn1      String
  customerShipAddLn2      String?
  customerShipAddCity     String
  customerShipAddState    String
  customerShipAddZIP      String
  customerDOB             String?
  customerActive          Boolean            @default(true)
  account                 CustomerAccount    @relation(fields: [accountID], references: [customerAccountID])
  accountID               String
  favorites               Product[]
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
  salesTransactions       SalesTransaction[]
  customerFeedback        CustomerFeedback[]
  productProductID        String
  CustomerPayment         CustomerPayment[]
}

// The CustomerPayment table has a M:1 relationship with the CustomerProfile table as customers can save multiple
// payment methods on their profiles. Payment methods are linked to a profile, not an account, but profiles 
// within the same account can share payment methods. This table only holds basic payment information and the
// paymentID is used as a reference to the Stripe API providing a connector to the system of record for 
// customer payment account numbers, expiration dates, and verification codes.
model CustomerPayment {
  paymentMethodID           String          @id @default(uuid())
  paymentMethodFriendlyName String          @db.VarChar(255)
  paymentMethodType         String          @db.VarChar(1)
  profile                   CustomerProfile @relation(fields: [customerProfileCustomerID], references: [customerID])
  customerProfileCustomerID String
}

model Product {
  productID                        String             @id @default(uuid())
  productName                      String             @unique @db.VarChar(255)
  productActive                    Boolean?           @default(true)
  productCategory                  ProductCategory?   @relation(fields: [productCategoryProductCategoryID], references: [productCategoryID])
  createdAt                        DateTime           @default(now())
  updatedAt                        DateTime           @updatedAt
  salesTransactions                SalesTransaction[]
  productDetail                    ProductDetail[]
  productVendor                    ProductVendor?     @relation(fields: [productVendorProductVendorID], references: [productVendorID])
  productVendorProductVendorID     String?
  productCategoryProductCategoryID String?
  CustomerProfile                  CustomerProfile?   @relation(fields: [customerProfileCustomerID], references: [customerID])
  customerProfileCustomerID        String?
}

// The ProductDetail table has a 1:1 relationship with the Product table
model ProductDetail {
  productDetailID     String             @id @default(uuid())
  productDescription  String             @db.VarChar(255)
  productCost         Float
  productRetail       Float
  productSaleRetail   Float?
  productSKU          String
  productDetailActive Boolean            @default(true)
  productSize         String
  productColor        String
  productFlavor       String
  productSaleFlag     Boolean            @default(false)
  productStartDate    DateTime
  productEndDate      DateTime
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  product             Product            @relation(fields: [productProductID], references: [productID])
  productProductID    String
  ProductInventory    ProductInventory[]
  ProductOrder        ProductOrder[]
}

model ProductInventory {
  inventoryID                  String        @id @default(uuid())
  countOnHand                  Int
  product                      ProductDetail @relation(fields: [productDetailProductDetailID], references: [productDetailID])
  productDetailProductDetailID String
}

// The ProductCategory table has a 1:M relationhip with the Product table
model ProductCategory {
  productCategoryID   String    @id @default(uuid())
  productCategoryName String    @db.VarChar(255)
  products            Product[]
}

model ProductOrder {
  productOrderID               String        @id @default(uuid())
  poNumber                     String
  products                     ProductDetail @relation(fields: [productDetailProductDetailID], references: [productDetailID])
  productDetailProductDetailID String
  poExtendedCost               Float
  poExtendedRetail             Float
  poFreight                    Float
  poDiscount                   Float
  poProductManager             UserAccount   @relation(fields: [userAccountUserAccountID], references: [userAccountID])
  userAccountUserAccountID     String
}

// The ProductVendor table has a 1:M relationship with the Products table
model ProductVendor {
  productVendorID       String    @id @default(uuid())
  productVendorName     String    @db.VarChar(255)
  productVendorEmail    String
  productVendorPhone    String
  productVendorAddLn1   String
  productVendorAddLn2   String?
  productVendorAddCity  String
  productVendorAddState String
  productVendorAddZIP   String
  productVendorActive   Boolean   @default(true)
  productVendorTerms    String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  products              Product[]
}

// The Product table and the SalesTransaction table have a M:M relationship.
// The CustomerAccount table and the SalesTransaction table have a M:1 relationship
// The Customer table and the SalesTransaction table have a M:1 relationship
model SalesTransaction {
  transactionID                    String          @id @default(uuid())
  transactionDate                  DateTime
  products                         Product[]
  customerAccount                  CustomerAccount @relation(fields: [customerAccountCustomerAccountID], references: [customerAccountID])
  customerAccountCustomerAccountID String
  customer                         CustomerProfile @relation(fields: [customerCustomerID], references: [customerID])
  customerCustomerID               String
  transactionVoid                  Boolean         @default(false)
  createdAt                        DateTime        @default(now())
  updatedAt                        DateTime        @updatedAt
}

model CustomerFeedback {
  customerFeedbackID String           @id @default(uuid())
  customerFeedback   String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  customer           CustomerProfile? @relation(fields: [customerCustomerID], references: [customerID])
  customerCustomerID String
}
